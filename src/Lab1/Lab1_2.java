package Lab1;

import java.util.Locale;

public class Lab1_2 {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ù–û–î –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ï–≤–∫–ª–∏–¥–∞ –≤ GF(2)
    public static int gf2_gcd(int a, int b) {
        int temp;
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ b –Ω–µ —Å—Ç–∞–Ω–µ—Ç —Ä–∞–≤–Ω–æ –Ω—É–ª—é
        while (b != 0) {
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ b
            temp = b;
            // –û–±–Ω–æ–≤–ª—è–µ–º b –∫–∞–∫ –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è a –Ω–∞ b
            b = a % b;
            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º a –∑–Ω–∞—á–µ–Ω–∏–µ temp
            a = temp;
        }
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ù–û–î, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω a
        return a;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ï–≤–∫–ª–∏–¥–∞ –≤ GF(2)
    public static void gf2_extended_gcd(int a, int b, int[] result) {
        // –ï—Å–ª–∏ b —Ä–∞–≤–Ω–æ –Ω—É–ª—é, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        if (b == 0) {
            result[0] = a; // –ù–û–î
            result[1] = 1; // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è a
            result[2] = 0; // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è b
        } else {
            // –ò–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º —á–∞—Å—Ç–Ω–æ–µ –∏ –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è a –Ω–∞ b
            int q = a / b;
            int r = a % b;
            int[] tempResult = new int[3];
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ b –∏ r
            gf2_extended_gcd(b, r, tempResult);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result[0] = tempResult[0]; // –ù–û–î
            result[1] = tempResult[2]; // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è a
            result[2] = tempResult[1] ^ (q * tempResult[2]); // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è b
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å –≤ GF(2)
    public static int gf2_power(int base, int exponent) {
        int result = 1;
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª, –ø–æ–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ –±–æ–ª—å—à–µ –Ω—É–ª—è
        while (exponent > 0) {
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ—á–µ—Ç–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (exponent % 2 == 1) {
                result = (result * base) % 256; // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥—É–ª—å 256
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–ª–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ 2
            base = (base * base) % 256; // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥—É–ª—å 256
            exponent /= 2;
        }
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å
        return result;
    }

    public static void main(String[] args) {
        int n = 21; // –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ n

        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ N(x) –∏ K(x) –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª
        int N = (9 * n) % 256;
        int K = (7 * (41 - n)) % 256;

        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ù–û–î(N(x), K(x)) –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ï–≤–∫–ª–∏–¥–∞ –≤ GF(2)
        int gcdNK = gf2_gcd(N, K);

        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ï–≤–∫–ª–∏–¥–∞ –≤ GF(2)
        int[] result = new int[3];
        gf2_extended_gcd(N, K, result);
        int coeff_a = result[1];
        int coeff_b = result[2];

        // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º –≤–∏–¥–µ
        System.out.printf("N(x) binary = \"9ùëõ ùëöùëúùëë 256\" = %08d%n", Integer.parseInt(Integer.toBinaryString(N)));
        System.out.printf("K(x) binary = \"7(41 ‚àí n) mod 256\" = %08d%n", Integer.parseInt(Integer.toBinaryString(K)));
        System.out.printf("N(x) = \"9ùëõ ùëöùëúùëë 256\" = %d\n", N);
        System.out.printf("K(x) = \"7(41 ‚àí n) mod 256\" = %d\n", K);
        System.out.printf("GCD(N(x), K(x)): %d\n", gcdNK);
        System.out.printf("A(x): %d\n", coeff_a);
        System.out.printf("B(x): %d\n", coeff_b);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ A(x)*N(x) + B(x)*K(x) = GCD(N(x), K(x))
        int tempResult = coeff_a * N + coeff_b * K;
        System.out.printf("A(x)*N(x) + B(x)*K(x) = GCD(N(x), K(x)) : %d*%d + %d*%d = %d. %d %% 256 = %d \n", coeff_a, N, coeff_b, K, tempResult, tempResult, gcdNK);

        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ N(x)^8 mod (x^2 + x + 1)
        int resultPower = gf2_power(N, 8);
        int mod = 5; // x^2 + x + 1 –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —ç—Ç–æ 5
        int resultPowerMod = resultPower % mod;
        System.out.printf("N(x)^8 mod (x^2 + x + 1) = %d\n", resultPowerMod);

        // –†–µ—à–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è K(x) * A(x) ? N(x) –ºo–¥ x^8 + x^4 + x^3 + x + 1
        int polyMod = 283; // x^8 + x^4 + x^3 + x + 1 –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —ç—Ç–æ 283
        int equation_result = (K * coeff_a) % polyMod;
        System.out.printf(new Locale("ru", "RU"), "Comparison result: %d\n", equation_result);
    }
}
